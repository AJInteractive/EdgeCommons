---------------------------------------------------------------------
Loading EdgeCommons (EC)
---------------------------------------------------------------------
Short and painless version:
Simply put this line in compositionReady of your Edge composition:
yepnope({load: "http://simonwidjaja.github.com/EdgeCommons/live/EdgeCommons-0.3.0.js"});

Advanced version:
If you have to wait until EdgeCommons is setup you can use a callback like this:
yepnope({
	load: "http://simonwidjaja.github.com/EdgeCommons/live/EdgeCommons-0.3.0.js",
	callback: function() {
		// Your code (e.g. start playing the composition)
	}
});


---------------------------------------------------------------------
Logging (part of Modulog Framework by Simon Widjaja)
---------------------------------------------------------------------
When your compositions get bigger and your scripts more complex you can't live without it: Logging. With EdgeCommons you get more advanced logging capabilities than console.log.

Let's keep it simple:

// Simple log to the console
EC.info( "Logging with EdgeCommons is easy" );

Different log levels:

EC.info( "Message" );
EC.debug( "Message" );
EC.warn( "Message" );
EC.error( "Message" );

Logging groups (works with all levels):

EC.info( "Message", "GROUP NAME" );
or
EC.info( "Message", "Compostion Intro" );

Dumping complex data types to the console (works with all levels):

EC.info( "Message", "GROUP", complexObject );
or
EC.info( "Message", "GROUP", sym );

Setting the current log level (filter):

// No logging at all
EC.Log.level = EC.Log.LEVEL_NONE; 
// Only log error
EC.Log.level = EC.Log.LEVEL_ERROR; 
// Only log warn and error
EC.Log.level = EC.Log.LEVEL_WARN; 
// Only log info, warn and error
EC.Log.level = EC.Log.LEVEL_INFO;
// Log everything
EC.Log.level = EC.Log.LEVEL_DEBUG; 

Additional log targets (e.g. alert, server call to send email etc.):

// Add log target to also alert the logs
EC.Log.addLogTarget(function(msg){
  alert(msg);
});
EC.error("This is a error log in the console AND as alert dialog");

---------------------------------------------------------------------
Sound
---------------------------------------------------------------------

EC.Sound is a simple wrapper for SoundJS that enables Edge to play all kind of sounds easily. You first have to setup the sound system by creating a simple manifest (Array with all sound references) and pass it to the setup() method. Then you can use the play() method to play the sounds. So let there be sound!


// Load sound manifest (e.g. in creationComplete)
var assetsPath = "media/";
EC.Sound.setup(        
	[
		{src: assetsPath + "bassdrum.mp3|" + assetsPath + "bassdrum.ogg", id: "bassdrum"},
		{src: assetsPath + "snaredrum.mp3|" + assetsPath + "snaredrum.ogg", id: 'snaredrum'}
	], 
	function(){ EC.info("Sound setup finished", "DEMO"); }
);

// Play sound (e.g. on click)
EC.Sound.play("bassdrum");


FAQ

For playing sound right after setting up the manifest you can the callback function which is the 2nd argument of the setup() method. This will be called when setup is finished and sound is ready to play.

The ability to play sounds depends on the browser. Older browsers may not support sound in HTML. Checkout docs of SoundJS for more information.
